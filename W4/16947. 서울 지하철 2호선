import sys
from collections import deque

sys.setrecursionlimit(10000)

N = int(input())
graph = [[] for _ in range(N + 1)]

# 그래프 생성
for _ in range(N):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

# 순환선 탐색
visited = [False] * (N + 1)
in_cycle = [False] * (N + 1)
cycle_found = False
path = []

def dfs(curr, prev):
    global cycle_found
    if cycle_found:
        return

    visited[curr] = True
    path.append(curr)

    for next in graph[curr]:
        if not visited[next]:
            dfs(next, curr)
            if cycle_found:
                return
        elif next != prev and not cycle_found:
            # 사이클 발견
            idx = path.index(next)
            for i in range(idx, len(path)):
                in_cycle[path[i]] = True
            cycle_found = True
            return

    path.pop()

dfs(1, -1)

# 거리 계산
dist = [-1] * (N + 1)
q = deque()

# 사이클 노드는 거리 0
for i in range(1, N + 1):
    if in_cycle[i]:
        dist[i] = 0
        q.append(i)

# BFS로 거리 측정
while q:
    cur = q.popleft()
    for next in graph[cur]:
        if dist[next] == -1:
            dist[next] = dist[cur] + 1
            q.append(next)

# 출력
print(*dist[1:])
