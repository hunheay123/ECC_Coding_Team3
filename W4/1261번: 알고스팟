from collections import deque

M, N = map(int, input().split())
maze = [list(map(int, input().strip())) for _ in range(N)]

# 이동 방향 (상, 하, 좌, 우)
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

# 벽을 부순 횟수를 저장할 배열
dist = [[-1] * M for _ in range(N)]
dist[0][0] = 0

q = deque()
q.append((0, 0))

while q:
    x, y = q.popleft()
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]

        if 0 <= nx < N and 0 <= ny < M:
            if dist[nx][ny] == -1:
                if maze[nx][ny] == 0:
                    dist[nx][ny] = dist[x][y]
                    q.appendleft((nx, ny))  # 비용이 0인 경우 먼저 탐색
                else:
                    dist[nx][ny] = dist[x][y] + 1
                    q.append((nx, ny))      # 비용이 1인 경우 나중에 탐색

print(dist[N-1][M-1])
